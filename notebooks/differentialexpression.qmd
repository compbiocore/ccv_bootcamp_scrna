---
title: "Differential Expression"
format: html
editor: visual
execute: 
  cache: true
---

## Differential Expression Analysis

The bulk of Seuratâ€™s differential expression features can be accessed through the `FindMarkers()` function. By default, Seurat performs differential expression (DE) testing based on the non-parametric Wilcoxon rank sum test. To test for DE genes between two specific groups of cells, specify the `ident.1` and `ident.2` parameters. Since we normalized using SCTransform, we have to run `PrepSCTFindMarkers()` first. Given a merged object with multiple SCT models, this function uses minimum of the median UMI (calculated using the raw UMI counts) of individual objects to reverse the individual SCT regression model using minimum of median UMI as the sequencing depth covariate. The counts slot of the SCT assay is replaced with recorrected counts and the data slot is replaced with log1p of recorrected counts. Then set the `DefaultAssay` to be the RNA assay.

```{r}
Idents(all_data_sub) <- "orig.ident"
all_data_sub <- PrepSCTFindMarkers(all_data_sub)
DefaultAssay(all_data_sub) <- "RNA"

stim_vs_ctrl <- FindMarkers(all_data_sub, ident.1 = "IMMUNE_STIM", ident.2 = "IMMUNE_CTRL")
head(stim_vs_ctrl %>% dplyr::filter(p_val_adj < .05 & avg_log2FC > 1))
```

The results data frame has the following columns :

```         
p_val : p-value (unadjusted)
avg_log2FC : log fold-change of the average expression between the two groups. Positive values indicate that the feature is more highly expressed in the first group.
pct.1 : The percentage of cells where the feature is detected in the first group
pct.2 : The percentage of cells where the feature is detected in the second group
p_val_adj : Adjusted p-value, based on Bonferroni correction using all features in the dataset.
```

If the `ident.2` argument is omitted, `FindMarkers` will test for differentially expressed features between the group specified by `ident.1` and all other cells. Additionally, the parameter `only.pos` can be set to TRUE to only search for positive markers, i.e. features that are more highly expressed in the ident.1 group.

```{r}
stim_vs_all <- FindMarkers(all_data_sub, ident.1 = "IMMUNE_STIM", only.pos = T)
head(stim_vs_all %>% dplyr::filter(p_val_adj < .05 & avg_log2FC > 1))
```

We can switch idents to find marker genes for the clusters:

```{r}
Idents(all_data_sub) <- 'cca_clusters'
```

Use `FindAllMarkers` to compare each cluster to all the other clusters. For the sake of speed, we are selecting only positive genes that are expressed in at least 90% of the cells for a given cluster:

```{r}
cca_markers <- FindAllMarkers(all_data_sub, min.pct = .90, only.pos=TRUE)
```

Look at the 3 marker genes with the biggest fold change per cluster

```{r}
top_cluster_markers <- 
  cca_markers %>% 
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>% 
  top_n(n = 3, wt = avg_log2FC)
top_cluster_markers
```

Make a `FeaturePlot` to look at the expression of one of the cluster markers. It will plot the `data` slot from the default assay. We can switch the default assay to SCT first and specify that we want to use the `data` slot (log1p(counts)):

```{r}
DefaultAssay(all_data_sub) <- "SCT"

FeaturePlot(all_data_sub, features = c("CD74"), reduction = 'umap.cca', order = T, slot = 'data')
```

We can adjust the default colors and use one of the `viridis` palettes:

```{r}
FeaturePlot(all_data_sub, features = c("CD74"), reduction = 'umap.cca', order = T, slot = 'data') & ggplot2::scale_color_gradientn(colors = viridis::turbo(n = 10, direction = 1))

```

We can add the cluster labels:

```{r}
FeaturePlot(all_data_sub, features = c("CD74"), reduction = 'umap.cca', order = T, slot = 'data', label = TRUE, repel = TRUE) & ggplot2::scale_color_gradientn(colors = viridis::turbo(n = 10, direction = 1))

```

We can use `RColorBrewer` palettes instead and specify that we want to drop the colors on the extreme ends of the `Spectral` palette:

```{r}
FeaturePlot(all_data_sub, features = c("CD74"), reduction = 'umap.cca', order = T, slot = 'data', label = TRUE, repel = TRUE) & ggplot2::scale_color_gradientn(colors = rev(brewer.pal(10, 'Spectral'))[3:8])
```

And add a legend title

```{r}
FeaturePlot(all_data_sub, features = c("CD74"), reduction = 'umap.cca', order = T, slot = 'data', label = TRUE, repel = TRUE) & ggplot2::scale_color_gradientn(colors = rev(brewer.pal(10, 'Spectral'))[3:8]) & ggplot2::labs(color = "log1p\n(counts)")
```

We can also make a heatmap of the cluster markers. Seurat heatmaps use the `scale.data` slot by default.

```{r}
DoHeatmap(subset(all_data_sub, downsample = 50), features = top_cluster_markers$gene, size = 3)
```

We can customize this heatmap as well:

```{r}
DoHeatmap(subset(all_data_sub, downsample = 50), features = top_cluster_markers$gene, size = 3) & viridis::scale_fill_viridis() 
```

We can adjust which legends are shown, like this:

```{r}
DoHeatmap(subset(all_data_sub, downsample = 50), features = top_cluster_markers$gene, size = 3) & viridis::scale_fill_viridis() & ggplot2::guides(fill=FALSE)
```

Or like this:

```{r}
DoHeatmap(subset(all_data_sub, downsample = 50), features = top_cluster_markers$gene, size = 3) & viridis::scale_fill_viridis() & ggplot2::guides(colour=FALSE)
```
