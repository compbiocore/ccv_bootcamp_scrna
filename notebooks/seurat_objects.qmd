---
title: "Seurat Objects"
format: html
editor: visual
execute: 
  cache: true
---

## Seurat objects overview

::: callout-important
In November of 2023, Seurat made a major upgrade to Seurat v5 (https://github.com/satijalab/seurat/releases), which included many new functions and other changes (https://satijalab.org/seurat/articles/announcements.html#changes-in-seurat-v5), including some very big changes to the default behavior of Seurat. **You will likely see different results depending on which version of Seurat you have used for your analysis.** Feel free to come to our office hours if you want help setting up reproducible analyses using either version of Seurat.
:::

This workshop focuses on using Seurat objects to structure your scRNA-seq data (https://github.com/satijalab/seurat/wiki/Seurat), we will attempt to cover how to interact with Seurat objects in Seurat v4 and v5, but won't exhaustively cover the differences between the two versions.

Here's a schematic of a Seurat object:

![Schematic of a Seurat object](image/seurat_object.png){width="470" height="400"}

-   Each Seurat object is composed of different components:
    -   **`assays`** is a list of all the assays in the object.
        -   Defaults to `RNA` assay, but you can add others (like `SCT` for normalizd counts, shown in the figure above, could also be antibody-derived tags, etc.).

        -   You can see all assays using `Assays(ifnb)`, see which assay is the currently active assay by looking in the `active.assay` slot (`ifnb@active.assay`) and switch between them using the `DefaultAssay()` function (`DefaultAssay(ifnb) <- 'RNA'`).

        -   Each assay will store multiple transformations of the data in different `slots` (or `layers` in Seurat v5) -- in the case of `RNA` data these slots are:

            -   `@counts` contains the raw counts.
            -   `@data` contains the normalized counts.
            -   `@scale.data` contains the scaled data for dimensional reduction.

        -   The `slots` (Seurat v4) or `layers` (Seurat v5) store the data as a sparse matrix where the rows are gene and the columns are cells.

        -   In Seurat v4, you could access the raw counts like this:`GetAssayData(ifnb, assay="RNA", slot='counts')`. This will still work in Seurat v5, but you'll get a warning message. In Seurat v5 it is intended that you access the counts using the `LayerData` function, like this: `LayerData(ifnb, assay='RNA', layer='counts')`

        -   In either version of Seurat `ifnb[['RNA']]$counts` will also work.
    -   **`meta.data`** is a matrix of all the cell-level metadata.
        -   This will include information about which condition, timepoint, batch, etc. a for a given cell.
        -   It also includes metrics that will be relevant for QC, like `nCount_RNA` and `nFeature_RNA`
            -   `nCount_RNA` is the total number of molecules (UMIs) detected within a cell.
            -   `nFeature_RNA` is the total number of genes detected within a cell.
        -   Once you have completed clustering, you'll also see information about which cluster each cell has been assigned to.
        -   The different categories or columns in the `meta.data` are also called `Idents` in Seurat.
        -   You can see the current `Ident` in the `active.ident` slot (`ifnb@active.ident`) and switch between them using the `Idents()` function (this will probably be important for running differential expression testing).
        -   You can use `table(Idents(ifnb))` for a quick summary of the number of cells in each grouping.
    -   **`graphs`** is a list of the nearest neighbor graphs.
        -   The objects stored in `graphs` are cell x cell matrices containing the neighborhood overlap (Jaccard index) between every cell and its nearest neighbors.
    -   **`reductions`** is a list of `DimReduc` objects.
    -   **`version`** contains information about which version of Seurat was used to make the object.
    -   There are other optional slots, including **`tools`** and **`misc`** that can be populated by specific analysis tools (`tools`) or users can store their own additional information (`misc`).

## Importing data and interacting with Seurat objects

**Much of this notebook is taken from the various Seurat vignettes: https://satijalab.org/seurat/articles/get_started.html**

First, load all the libraries we need, including some Seurat data packages. The last line will update the Seurat objects so that they are compatible with the newest version of Seurat.

```{r message=FALSE, warning=FALSE}
.libPaths(c('/usr/local/lib/R/site-library', '/usr/local/lib/R/library'))

library(RColorBrewer)
library(Seurat)
library(patchwork)
#library(ggplot2)
library(dplyr)
library(hdf5r)
library(stringr)
library(biomaRt)
#library(viridis)
#library(SeuratDisk)
library(SeuratData)
#library(msigdbr)
#library('pbmc3k.SeuratData')
#library('cbmc.SeuratData')
library('ifnb.SeuratData')
#data("pbmc3k")
#data("cbmc")
data("ifnb")
ifnb <- UpdateSeuratObject(ifnb)
data("pbmc3k")
pbmc3k <- UpdateSeuratObject(pbmc3k)
```

-   We are using the `SeuratData` package for some test data.
-   Use `AvailableData()` to see what datasets are available

```{r}
SeuratData::AvailableData() %>% data.frame() %>% head()
SeuratData::AvailableData() %>% data.frame() %>% dplyr::filter(Installed == 'TRUE')
```

-   We've already installed some test data in this container. You would usually be able to install more data sets using `InstallData` but won't have permissions to install in this container.
-   It is more likely that you are using Seurat with your own data -- you can use the functions `Read10X` or `Read10X_h5` to import data.
-   `Read10X_h5` works with H5 files -- "Hierarchical Data Format (HDF5 or H5). H5 is a binary format that can compress and access data much more efficiently than text formats such as MEX, which is especially useful when dealing with large datasets." https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/h5_matrices.
-   You can also use `Read10X` and give a path to a folder that contains your matrix, features, and barcode tsv files.
-   After you have read in the 10X data, use it as the input to the `CreateSeuratObject` function.

As an aside, you can also import counts matrix data from GEO using something like this function I wrote based on a biostars post (although I make no guarantees that this will work with everything from GEO -- proceed with caution and feel free to come by office hours for help if this is something you need to do):

```{r, eval=FALSE}
#https://www.biostars.org/p/9527335/#9527339
counts_to_seurat <- function(matrix_path, project){
  
  #use fread to import the data
  mat <- data.table::fread(matrix_path)

  #set rownames to be the first column of gene IDs
  rownames(mat) <- mat$V1 
  
  #make `mat` be only numeric data by removing column of gene IDs
  mat$V1 <- NULL

  #create Seurat object
  seu <- CreateSeuratObject(counts = mat, 
                            project = project)
  
  return(seu)
}

E12_JS_14 <- counts_to_seurat(matrix_path = '/data/cbc/Dennery_scRNAseq/dennery_2023_grant/GSE165063/GSM5025543_E12_JS-14_processed_counts.csv', project = 'E12_JS_14')
```

We can look at the Seurat object we've loaded from SeuratData:

```{r}
?ifnb
```
The `ifnb` dataset is 14,000 IFNB-Stimulated and Control PBMCs (peripheral blood mononuclear cells). 

```{r}
ifnb
```
We can also see that Seurat v5 assays store data in layers. These layers can store raw, un-normalized counts (layer='counts'), normalized data (layer='data') or z-scored/variance-stabilized data (layer='scale.data'). What assays and meta.data are available?

```{r}
ifnb@assays
head(ifnb@meta.data)
```
We have an `RNA` assay, information about which experimental condition the cell came from (`orig.ident` and `stim`), the number of genes (`nFeature_RNA`) and molecules (`nCount_RNA`) in each cell. This particular object also comes pre-annotated (`seurat_annotations`). 

We will aim to eventually integrate the different samples (`IMMUNE_CTRL` and `IMMUNE_STIM` from `orig.ident`) together. In previous versions of Seurat, we would require the data to be represented as a list of different Seurat objects. When using Seurat v5 assays, we can instead keep all the data in one object, but simply split the layers.

```{r}
ifnb[["RNA"]] <- split(ifnb[["RNA"]], f = ifnb$orig.ident)
ifnb
```

After splitting, there are now 4 layers (a counts and data layer for each batch). Since the data is split into layers, normalization and variable feature identification is performed for each sample independently (a consensus set of variable features is automatically identified).

